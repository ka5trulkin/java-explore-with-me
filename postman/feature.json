{
	"info": {
		"_postman_id": "fbe093c8-de9b-4018-8856-91f4a65bdbd1",
		"name": "Comments feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29102462"
	},
	"item": [
		{
			"name": "User Boba",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"BobaId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Boba\",\r\n  \"email\": \"Boba@mail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Biba",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"BibaId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Biba\",\r\n  \"email\": \"Biba@mail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"catId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"category\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/categories",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
							"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
							"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
							"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
							"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
							"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
							"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
							"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
							"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"eventId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment со статусом PENDING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment с несуществующим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{badId}}"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment с несуществующим событием",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{badId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment text null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{badId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment text без символов",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{badId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment text с пробелами",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"   \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{badId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment с text.length > 2000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"jFnaSSoqCKirIkGPmPAmgRxMw4wsNLtWZD4VU0OYNP7a7S7SeRdBt0LEtPJIMjsQxhlU9w2vCJr6DCkZTcu3y7Q6UlSySDwYkTskFm1Y871B0LXS2BKxH5ltPIyXN6ThaPrSyDwKhWHFep6qAiiQtdYzRTp7D4mNZlnMDzmqNjWC8X2lcVF61nh113w5O6UyZgOWVdKTu5oalsicisQUPN4523VxVHXZt28VFIBAk3Hjz8kwiA2s5xhJfhbzsFi0G3Ex2dAZDUKOTXg7EgTN3H6QPWpXOwJFt5ELnIxGuohv6TtTSvCm8EGkRUEhhrTjLll9du5icLKuSrH6P3ai0sONMueUWWSY4vdsADEtDhPdCZJrdmEtNyT6OH6Wf8B4DJtiU9j2c3Qk4KYTWPgYlx1GAtKub3m4v7BpJ3pylZexYRCod0gx1K8L4vn6yMIAnkQ7dGB6Wj3AfVXt3tvg6IaO3w9RpdCxP0xih3LkdMNN5A3OOV4PwtgmczIRRdpbgZOVOhpPbK3FSa6GTuvsSzWFxxKUQFbECWfYQZluCMdNm11shU1QPw2U58syRzWwmgyLQ1ivF4kIVHMKXghnVLfCDXOzPuqiuo8tEnHmKuHQN0SkaNsb05OfhGCCPxl7NIM4SKPYvZ90MpMbZuYOplVg5lVATKbfgrbInDoikLvKE2Hea2jlOvO3UpYvnMidxqFbB1kgvVCJneraElInsBUfyAS412YvtBJEX017JQUucvgyrm3h5llfNUOfw5vGteCicNaGLv72eBSniNp8gtbSwpfxfMqdyKc9ym9K8Td2K20Qa7EaXpeu1hWwTAS7t9LaWmEEZhdGPyAASbVT0jr8JWDGtMnSFInjeCf1MTsrMqABlFtVTrI0stftsFejiiCsB2n4zisKXWOf74W2kBqRt4AsxOrvsjuhXsoZ248qin94EsnJRNmsXWO8EzvePz1UNegGZb2IADANMdXqve7Sadmy9tKUqAz2TUYx6WPxXGXdsX77g7M92CQ7yh5eYyLVngL96GrJzENqWA8QDaFUazg0hwSp1D8lWvtpTuecgeuTMbbMEmuz5KkO4akPJnQ98ZaWl8lPzSvmiEAEZxMN0qZrgnw8391G1L0naMcf6UPy1jTGExyVtEurlnYlbYje9rUaiQEJ0nWtGcPD3BZPR6hKJ5FfARNUz4kXACL4fEwypY1NacBWUp9zJnAi8ht5H0llQ2gBLlttFEOTMV7nh3Eb4cRKbgUDCrhjnmYDfbwwDTdeEMeTJ6uTYWZBo7ewk0R2vD69Am2ScSPT5DB2xmDuYx9mEszxRbhNdqHeKB9KFHHRDF0oaMouVPSgqGWA51Wq9V8lkVCBynuYJ2DkqeXcuMZ04mcNMYdBrFBseXiCQFobXszTTTX7PvTF3N5Qr31TwMIKBbHoNvxqg55r0nlPjFHzh9HTZFrAjxPHUDpaVZiUOHfH73W8NGbBTqG7soFub9LzvZcTXIdxDaotFIpo3kpbu9gQH0EPpu9OIhA39zUWxECgGy15ImPV5yQC9cq1agC21yoaYWhcDzsIcIV52jEqN9ak1zHrCBHER2avLEPxBCliqkYYiL7fcUQhUoHR54oBXvNGGPmXHwQnuzzdASUNhqBVvOrZsbDMSSqM19Mlw1TqEsKdDfshKJ0CGTzSLwcqi2VSeygoOoWlG7vl2F7aRxugqv3nZMo9U4xdtSHuj8NWhmosJhoBF7HiulY84ei6SVAv0mmTiQF2JzIwx4d32W3DRD2AERbOUWmBan1b9DbtEI7a26h23L4YDylG9lsHYbaakZwaj9W2Y28YRKA6JssFjg1qAX376xOH6HZUY5ZgQhdCQfPJ7TMLLdFA9KvKv43HDWMPo8dy1QEy3ukaqWvz348yec12RFi4wWC0LamsYdnkyP9vJH09Xo0mlwzkpgzMK9rjkvsnEs4HTMAECYsWewMrL8n45IfChdbowWJ2RjDumoU6ghBm4gvN9omezYrgg\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{badId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Event смена статуса на PUBLISHED",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/events/:eventId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.text).equal(target.text, 'Комментарий долен соответствовать отправленному в запросе');\r",
							"    pm.expect(target.event).to.not.be.null;\r",
							"    pm.expect(target.commentator.id).to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"commentId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск события с комментарием после добавления",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json()[0];\r",
							"const comment = pm.response.json()[0].comments[0];\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, comments\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('comments');\r",
							"pm.expect(comment).to.have.property('id');\r",
							"pm.expect(comment).to.have.property('createdOn');\r",
							"pm.expect(comment).to.have.property('text');\r",
							"pm.expect(comment).to.have.property('event');\r",
							"pm.expect(comment).to.have.property('commentator');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, createdOn, text, event, commentator\", function () {\r",
							"pm.expect(comment).to.have.property('id');\r",
							"pm.expect(comment).to.have.property('createdOn');\r",
							"pm.expect(comment).to.have.property('text');\r",
							"pm.expect(comment).to.have.property('event');\r",
							"pm.expect(comment).to.have.property('commentator');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/admin/events?users={{BibaId}}&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"events"
					],
					"query": [
						{
							"key": "users",
							"value": "{{BibaId}}",
							"description": "список id пользователей, чьи события нужно найти"
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должно произойти событие"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должно произойти событие"
						}
					]
				},
				"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
			},
			"response": []
		},
		{
			"name": "Comment с несуществующим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{badId}}"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment с несуществующим событием",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{badId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment text null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{badId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment text без символов",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{badId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment text с пробелами",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"   \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{badId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment с text.length > 2000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"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\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{badId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.text).equal(target.text, 'Комментарий долен соответствовать отправленному в запросе');\r",
							"    pm.expect(target.event).to.not.be.null;\r",
							"    pm.expect(target.commentator.id).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"comment update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск события с комментарием после обновления",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json()[0];\r",
							"const comment = pm.response.json()[0].comments[0];\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, comments\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('comments');\r",
							"pm.expect(comment).to.have.property('id');\r",
							"pm.expect(comment).to.have.property('createdOn');\r",
							"pm.expect(comment).to.have.property('text');\r",
							"pm.expect(comment).to.have.property('event');\r",
							"pm.expect(comment).to.have.property('commentator');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, createdOn, text, event, commentator\", function () {\r",
							"pm.expect(comment).to.have.property('id');\r",
							"pm.expect(comment).to.have.property('createdOn');\r",
							"pm.expect(comment).to.have.property('text');\r",
							"pm.expect(comment).to.have.property('event');\r",
							"pm.expect(comment).to.have.property('commentator');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/admin/events?users={{BibaId}}&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"events"
					],
					"query": [
						{
							"key": "users",
							"value": "{{BibaId}}",
							"description": "список id пользователей, чьи события нужно найти"
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должно произойти событие"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должно произойти событие"
						}
					]
				},
				"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
			},
			"response": []
		},
		{
			"name": "Удаление комментария другим пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const findedCategory = await api.findCategory(category.id);\r",
							"        pm.collectionVariables.set(\"catid\", category.id)\r",
							"        pm.collectionVariables.set(\"response\", findedCategory)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BobaId}}"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				},
				"description": "Обратите внимание: с категорий не должно быть связано ни одного события."
			},
			"response": []
		},
		{
			"name": "Удаление комментария пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const findedCategory = await api.findCategory(category.id);\r",
							"        pm.collectionVariables.set(\"catid\", category.id)\r",
							"        pm.collectionVariables.set(\"response\", findedCategory)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				},
				"description": "Обратите внимание: с категорий не должно быть связано ни одного события."
			},
			"response": []
		},
		{
			"name": "Comment попытка обновления удаленного пользователем комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"comment update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.text).equal(target.text, 'Комментарий долен соответствовать отправленному в запросе');\r",
							"    pm.expect(target.event).to.not.be.null;\r",
							"    pm.expect(target.commentator.id).to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"commentId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск события с комментарием",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json()[0];\r",
							"const comment = pm.response.json()[0].comments[0];\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, comments\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('comments');\r",
							"pm.expect(comment).to.have.property('id');\r",
							"pm.expect(comment).to.have.property('createdOn');\r",
							"pm.expect(comment).to.have.property('text');\r",
							"pm.expect(comment).to.have.property('event');\r",
							"pm.expect(comment).to.have.property('commentator');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, createdOn, text, event, commentator\", function () {\r",
							"pm.expect(comment).to.have.property('id');\r",
							"pm.expect(comment).to.have.property('createdOn');\r",
							"pm.expect(comment).to.have.property('text');\r",
							"pm.expect(comment).to.have.property('event');\r",
							"pm.expect(comment).to.have.property('commentator');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/admin/events?users={{BibaId}}&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"events"
					],
					"query": [
						{
							"key": "users",
							"value": "{{BibaId}}",
							"description": "список id пользователей, чьи события нужно найти"
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должно произойти событие"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должно произойти событие"
						}
					]
				},
				"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
			},
			"response": []
		},
		{
			"name": "Удаление комментария администратором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const findedCategory = await api.findCategory(category.id);\r",
							"        pm.collectionVariables.set(\"catid\", category.id)\r",
							"        pm.collectionVariables.set(\"response\", findedCategory)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/admin/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				},
				"description": "Обратите внимание: с категорий не должно быть связано ни одного события."
			},
			"response": []
		},
		{
			"name": "Comment попытка обновления удаленного администратором комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"comment update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{BibaId}}"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "BibaId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "BobaId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "badId",
			"value": "1234567",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "commentId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "catId",
			"value": "0",
			"type": "string"
		}
	]
}